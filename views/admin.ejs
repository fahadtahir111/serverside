<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Admin Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body { background: #f8fafc; }
    .navbar-brand { color: #2563eb !important; font-weight: bold; }
    .dashboard-container { max-width: 1200px; margin: 40px auto; background: #fff; border-radius: 0.5rem; box-shadow: 0 2px 8px #0001; padding: 2rem; }
    .table thead th { background: #e7f1ff; }
    .actions button { margin-right: 0.5rem; }
    .search-bar { max-width: 300px; }
    .modal-title { color: #2563eb; font-weight: bold; }
    .nav-pills .nav-link.active { background: #2563eb !important; color: #fff !important; }
  </style>
</head>
<body>
<nav class="navbar navbar-expand-lg navbar-light bg-white shadow-sm mb-4">
  <div class="container-fluid">
    <a class="navbar-brand" href="#">Admin Dashboard</a>
    <button class="btn btn-primary ms-auto" id="logout-btn">Logout</button>
  </div>
</nav>
<div class="dashboard-container">
  <ul class="nav nav-pills mb-4" id="adminTabs" role="tablist">
    <li class="nav-item" role="presentation">
      <button class="nav-link active" id="users-tab" data-bs-toggle="pill" data-bs-target="#users-pane" type="button" role="tab">Users</button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="logs-tab" data-bs-toggle="pill" data-bs-target="#logs-pane" type="button" role="tab">Logs</button>
    </li>
  </ul>
  <div class="tab-content">
    <!-- Users Tab -->
    <div class="tab-pane fade show active" id="users-pane" role="tabpanel">
      <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>Users</h2>
        <button class="btn btn-success" id="add-user-btn">+ Add User</button>
      </div>
      <input type="text" class="form-control search-bar mb-3" id="search-input" placeholder="Search users...">
      <div id="user-alert"></div>
      <div class="table-responsive">
        <table class="table table-hover" id="users-table">
          <thead>
            <tr>
              <th>ID</th>
              <th>Username</th>
              <th>Email</th>
              <th>Credits</th>
              <th>Created</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
    </div>
    <!-- Logs Tab -->
    <div class="tab-pane fade" id="logs-pane" role="tabpanel">
      <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>Logs</h2>
        <button class="btn btn-outline-secondary" id="refresh-logs-btn">Refresh</button>
      </div>
      <input type="text" class="form-control search-bar mb-3" id="log-search-input" placeholder="Search logs...">
      <div id="logs-alert"></div>
      <div class="table-responsive">
        <table class="table table-hover" id="logs-table">
          <thead>
            <tr>
              <th>Timestamp</th>
              <th>User</th>
              <th>Action</th>
              <th>Details</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
    </div>
  </div>
  <!-- Add/Edit User Modal -->
  <div class="modal fade" id="userModal" tabindex="-1" aria-labelledby="userModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="userModalLabel">Add User</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="user-form">
            <input type="hidden" id="user-id">
            <div class="mb-3">
              <label for="user-username" class="form-label">Username</label>
              <input type="text" class="form-control" id="user-username" required>
            </div>
            <div class="mb-3">
              <label for="user-email" class="form-label">Email</label>
              <input type="email" class="form-control" id="user-email" required>
            </div>
            <div class="mb-3">
              <label for="user-credits" class="form-label">Credits</label>
              <input type="number" class="form-control" id="user-credits" min="0" required>
            </div>
            <div class="mb-3" id="password-field">
              <label for="user-password" class="form-label">Password</label>
              <input type="password" class="form-control" id="user-password" required>
            </div>
            <button type="submit" class="btn btn-primary w-100">Save</button>
          </form>
        </div>
      </div>
    </div>
  </div>
  <!-- Delete User Modal -->
  <div class="modal fade" id="deleteUserModal" tabindex="-1" aria-labelledby="deleteUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="deleteUserModalLabel">Delete User</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <p>Are you sure you want to delete user <span id="delete-username"></span>?</p>
          <button type="button" class="btn btn-danger" id="confirm-delete-user">Delete</button>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        </div>
      </div>
    </div>
  </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script>
const API_URL = '/api/admin/users';
let users = [];
let currentEditUserId = null;
let currentDeleteUserId = null;

// JWT token from localStorage
function getToken() {
  return localStorage.getItem('token');
}

// Show toast/alert
function showUserAlert(msg, type) {
  document.getElementById('user-alert').innerHTML = `<div class="alert alert-${type} alert-dismissible fade show" role="alert">${msg}<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>`;
}

// Fetch all users
async function fetchUsers() {
  const token = getToken();
  if (!token) return showUserAlert('Not authenticated. Please <a href="/login">login</a>.', 'danger');
  try {
    const res = await fetch(API_URL, {
      headers: { 'Authorization': 'Bearer ' + token }
    });
    if (!res.ok) throw new Error('Failed to fetch users');
    users = await res.json();
    renderUsersTable(users);
  } catch (err) {
    showUserAlert('Failed to load users', 'danger');
  }
}

// Render users table
function renderUsersTable(data) {
  const tbody = document.querySelector('#users-table tbody');
  tbody.innerHTML = '';
  if (!data.length) {
    tbody.innerHTML = '<tr><td colspan="6">No users found.</td></tr>';
    return;
  }
  data.forEach(user => {
    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td>${user.id}</td>
      <td>${user.username}</td>
      <td>${user.email}</td>
      <td>${user.credits}</td>
      <td>${new Date(user.created_at).toLocaleString()}</td>
      <td class="actions">
        <button class="btn btn-sm btn-primary edit-user-btn" data-id="${user.id}">Edit</button>
        <button class="btn btn-sm btn-danger delete-user-btn" data-id="${user.id}" data-username="${user.username}">Delete</button>
      </td>
    `;
    tbody.appendChild(tr);
  });
  attachUserEventListeners();
}

// Search users
const searchInput = document.getElementById('search-input');
searchInput.addEventListener('input', function() {
  const val = this.value.toLowerCase();
  renderUsersTable(users.filter(u =>
    u.username.toLowerCase().includes(val) ||
    u.email.toLowerCase().includes(val)
  ));
});

// Attach event listeners to edit/delete buttons
function attachUserEventListeners() {
  document.querySelectorAll('.edit-user-btn').forEach(btn => {
    btn.addEventListener('click', async function() {
      const id = this.dataset.id;
      currentEditUserId = id;
      const token = getToken();
      const res = await fetch(`${API_URL}/${id}`, {
        headers: { 'Authorization': 'Bearer ' + token }
      });
      const user = await res.json();
      document.getElementById('user-id').value = user.id;
      document.getElementById('user-username').value = user.username;
      document.getElementById('user-email').value = user.email;
      document.getElementById('user-credits').value = user.credits;
      document.getElementById('password-field').style.display = 'none';
      document.getElementById('userModalLabel').textContent = 'Edit User';
      new bootstrap.Modal(document.getElementById('userModal')).show();
    });
  });
  document.querySelectorAll('.delete-user-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      currentDeleteUserId = this.dataset.id;
      document.getElementById('delete-username').textContent = this.dataset.username;
      new bootstrap.Modal(document.getElementById('deleteUserModal')).show();
    });
  });
}

// Add User button
const addUserBtn = document.getElementById('add-user-btn');
addUserBtn.addEventListener('click', function() {
  currentEditUserId = null;
  document.getElementById('user-form').reset();
  document.getElementById('user-id').value = '';
  document.getElementById('password-field').style.display = '';
  document.getElementById('userModalLabel').textContent = 'Add User';
  new bootstrap.Modal(document.getElementById('userModal')).show();
});

// Save (Add/Edit) User
const userForm = document.getElementById('user-form');
userForm.addEventListener('submit', async function(e) {
  e.preventDefault();
  const id = document.getElementById('user-id').value;
  const username = document.getElementById('user-username').value;
  const email = document.getElementById('user-email').value;
  const credits = document.getElementById('user-credits').value;
  const password = document.getElementById('user-password').value;
  const token = getToken();
  try {
    let res;
    if (id) {
      // Edit user
      res = await fetch(`${API_URL}/${id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + token
        },
        body: JSON.stringify({ username, email, credits })
      });
    } else {
      // Add user
      res = await fetch(API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + token
        },
        body: JSON.stringify({ username, email, password, credits })
      });
    }
    if (!res.ok) {
      const data = await res.json();
      showUserAlert(data.message || 'Failed to save user', 'danger');
      return;
    }
    bootstrap.Modal.getInstance(document.getElementById('userModal')).hide();
    showUserAlert('User saved successfully!', 'success');
    await fetchUsers();
  } catch (err) {
    showUserAlert('Failed to save user', 'danger');
  }
});

// Delete User
const confirmDeleteUserBtn = document.getElementById('confirm-delete-user');
confirmDeleteUserBtn.addEventListener('click', async function() {
  if (!currentDeleteUserId) return;
  const token = getToken();
  try {
    const res = await fetch(`${API_URL}/${currentDeleteUserId}`, {
      method: 'DELETE',
      headers: { 'Authorization': 'Bearer ' + token }
    });
    if (!res.ok) throw new Error('Failed to delete user');
    bootstrap.Modal.getInstance(document.getElementById('deleteUserModal')).hide();
    showUserAlert('User deleted successfully!', 'success');
    await fetchUsers();
  } catch (err) {
    showUserAlert('Failed to delete user', 'danger');
  }
});

// Logout
const logoutBtn = document.getElementById('logout-btn');
logoutBtn.addEventListener('click', function() {
  localStorage.removeItem('token');
  window.location.href = '/login';
});

// Initial load
fetchUsers();

// Logs Section
const LOGS_API_URL = '/api/admin/logs';
let logs = [];
// JWT token from localStorage
function getToken() { return localStorage.getItem('token'); }
function showLogsAlert(msg, type) {
  document.getElementById('logs-alert').innerHTML = `<div class="alert alert-${type} alert-dismissible fade show" role="alert">${msg}<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>`;
}
async function fetchLogs() {
  const token = getToken();
  if (!token) return showLogsAlert('Not authenticated. Please <a href="/login">login</a>.', 'danger');
  try {
    const res = await fetch(LOGS_API_URL, { headers: { 'Authorization': 'Bearer ' + token } });
    if (!res.ok) throw new Error('Failed to fetch logs');
    logs = await res.json();
    renderLogsTable(logs);
  } catch (err) {
    showLogsAlert('Failed to load logs', 'danger');
  }
}
function renderLogsTable(data) {
  const tbody = document.querySelector('#logs-table tbody');
  tbody.innerHTML = '';
  if (!data.length) {
    tbody.innerHTML = '<tr><td colspan="4">No logs found.</td></tr>';
    return;
  }
  data.forEach(log => {
    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td>${new Date(log.timestamp).toLocaleString()}</td>
      <td>${log.user_id || '-'}</td>
      <td>${log.action}</td>
      <td><pre style="margin:0;white-space:pre-wrap;">${log.details}</pre></td>
    `;
    tbody.appendChild(tr);
  });
}
document.getElementById('refresh-logs-btn').addEventListener('click', fetchLogs);
document.getElementById('log-search-input').addEventListener('input', function() {
  const val = this.value.toLowerCase();
  renderLogsTable(logs.filter(l =>
    (l.action && l.action.toLowerCase().includes(val)) ||
    (l.details && l.details.toLowerCase().includes(val))
  ));
});
// Fetch logs when logs tab is shown
const logsTab = document.getElementById('logs-tab');
logsTab.addEventListener('shown.bs.tab', fetchLogs);
</script>
</body>
</html> 